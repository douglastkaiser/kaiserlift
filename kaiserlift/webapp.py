"""Simple FastAPI application for KaiserLift.

This module exposes two endpoints:

* ``GET /`` – serves a page with a CSV upload control that uses JavaScript
  to send the file to ``/upload`` via ``fetch``.
* ``POST /upload`` – accepts the uploaded CSV, processes it with the core
  KaiserLift utilities and returns an HTML fragment generated by
  :func:`gen_html_viewer`.

The application can be started with ``python -m kaiserlift.webapp`` which will
launch a Uvicorn development server.
"""

from __future__ import annotations

import os

from fastapi import FastAPI, File, UploadFile
from fastapi.responses import HTMLResponse

from . import (
    df_next_pareto,
    gen_html_base,
    gen_html_viewer,
    highest_weight_per_rep,
    process_csv_files,
)


app = FastAPI()


@app.get("/", response_class=HTMLResponse)
async def index() -> HTMLResponse:
    """Return the base page with upload controls."""

    return HTMLResponse(gen_html_base())


@app.post("/upload", response_class=HTMLResponse)
async def upload(file: UploadFile = File(...)) -> HTMLResponse:
    """Process the uploaded CSV and return the rendered HTML snippet."""

    df = process_csv_files([file.file])

    # These calls are executed separately to satisfy the requirement of running
    # each processing step explicitly.
    _records = highest_weight_per_rep(df)
    _targets = df_next_pareto(_records)

    html = gen_html_viewer(df)
    return HTMLResponse(html)


def main() -> None:
    """Start a Uvicorn development server."""

    import uvicorn

    port = int(os.getenv("PORT", 8000))
    uvicorn.run("kaiserlift.webapp:app", host="0.0.0.0", port=port, reload=False)


if __name__ == "__main__":  # pragma: no cover - manual server start
    main()
