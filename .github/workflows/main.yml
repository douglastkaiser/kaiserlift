name: Main CI Workflow

on: push

jobs:

  lint:
    name: Lint with pre-commit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - uses: astral-sh/setup-uv@v6

      - name: Run pre-commit on all files
        env:
          PRE_COMMIT_USE_UV: "1"
        run: uvx pre-commit run --all-files

  test:
    name: Run Pytest on Local Checkout
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - uses: astral-sh/setup-uv@v6

      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Create venv and install package
        run: |
          uv venv
          uv pip install -e . pytest

      - name: Inject version into client
        run: uv run --no-project python scripts/inject_version.py

      - name: Run tests
        run: uv run --no-project python -m pytest tests

  # Test from pypi
  install-from-pypi:
    name: Run Pytest on Built Wheel
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo to get tests
        uses: actions/checkout@v4

      - uses: astral-sh/setup-uv@v6

      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Create venv, build and install wheel
        run: |
          uv venv
          uv build
          uv pip install dist/*.whl pytest

      - name: Inject version into client
        run: uv run --no-project python scripts/inject_version.py

      - name: Run tests using installed package
        run: uv run --no-project pytest tests

  generate-example-html:
    name: Generate example HTML
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - uses: astral-sh/setup-uv@v6

      - name: Sync dependencies
        run: uv sync

      - name: Inject version into client
        run: uv run --no-project python scripts/inject_version.py

      - name: Generate example HTML
        run: uv run python tests/example_use/generate_example_html.py

      - name: Upload HTML to Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: tests/example_use/build
      - id: pages
        name: Check if Pages is enabled
        shell: bash
        run: |
          status=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer ${{secrets.GITHUB_TOKEN}}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/pages)
          if [[ "$status" == "200" ]]; then
            echo "enabled=true" >> "$GITHUB_OUTPUT"
          else
            echo "enabled=false" >> "$GITHUB_OUTPUT"
          fi

      - id: deployment
        if: steps.pages.outputs.enabled == 'true'
        name: Deploy example HTML to Pages
        uses: actions/deploy-pages@v4

      - name: Add preview link to summary
        if: steps.pages.outputs.enabled == 'true'
        env:
          PAGE_URL: ${{ steps.deployment.outputs.page_url }}
        run: |
          {
            echo "### Example HTML";
            echo "[View example.html](${PAGE_URL})";
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Note preview artifact
        if: steps.pages.outputs.enabled != 'true'
        run: |
          {
            echo "### Example HTML";
            echo "GitHub Pages is not enabled for this repository.";
            echo "Download the 'github-pages' artifact to view example.html.";
          } >> "$GITHUB_STEP_SUMMARY"
